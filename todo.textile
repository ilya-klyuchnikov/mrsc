
h1. 1. Introduce abstract types

Is it possible to migrate from

bc.. trait GraphRewriteRules[C, D] {
  type N = SNode[C, D]
  type G = SGraph[C, D]
  type S = GraphRewriteStep[C, D]
  def steps(g: G): List[S]
}
 
p. to

bc.. trait GraphRewriteRules {
  type C
  type D
  type N = SNode[C, D]
  type G = SGraph[C, D]
  type S = GraphRewriteStep[C, D]
  def steps(g: G): List[S]
}

p. in type-safe way?

h1. 2. Example of program residuation directly from SGraph

It seems that it is possible to write an elegant functional algorithm
for such kind of residuation (functional pearl?). 

